import { ApproveErc20Spending, ApproveNftTransfer, AuctionBid, CancelSettleAuction, CreateAuctionEvm, DeployNftAuction, UpdateAuctionFeeRecipient } from '@tatumio/shared-blockchain-evm-based';
import { GanacheAccount } from './ganacheHelper';
declare type AuctionChains = 'ETH' | 'MATIC' | 'ONE' | 'BSC' | 'KLAY';
export declare const auctionTestFactory: {
    prepare: {
        deployAuctionSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        auctionUpdateFeeRecipientSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        createAuctionSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        auctionApproveNftTransferSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        auctionApproveErc20TransferSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        auctionBidSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        auctionCancelSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
        auctionSettleSignedTransaction: (sdk: SdkWithAuctionFunctions, accounts: GanacheAccount[], chain: AuctionChains) => void;
    };
};
export interface SdkWithAuctionFunctions {
    prepare: {
        deployAuctionSignedTransaction(body: DeployNftAuction, provider?: string): Promise<string>;
        auctionUpdateFeeRecipientSignedTransaction(body: UpdateAuctionFeeRecipient, provider?: any): Promise<string>;
        createAuctionSignedTransaction(body: CreateAuctionEvm, provider?: any): Promise<string>;
        auctionApproveNftTransferSignedTransaction(body: ApproveNftTransfer, provider?: any): Promise<string>;
        auctionApproveErc20TransferSignedTransaction(body: ApproveErc20Spending, provider?: any): Promise<string>;
        auctionBidSignedTransaction(body: AuctionBid, provider?: any): Promise<string>;
        auctionCancelSignedTransaction(body: CancelSettleAuction, provider?: any): Promise<string>;
        auctionSettleSignedTransaction(body: CancelSettleAuction, provider?: any): Promise<string>;
    };
}
export {};
