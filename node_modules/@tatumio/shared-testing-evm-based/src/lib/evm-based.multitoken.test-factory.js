"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.multiTokenTestFactory = void 0;
const tslib_1 = require("tslib");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
exports.multiTokenTestFactory = {
    prepare: {
        deployMultiTokenTransaction: (sdk, testData, addresses) => {
            var _a, _b, _c;
            const privateKey = (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.PRIVATE_KEY;
            const provider = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.PROVIDER;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.deployMultiTokenTransaction({
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    uri: 'https://example.com',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.deployMultiTokenTransaction({
                    fromPrivateKey: addresses ? addresses[0].privateKey : privateKey,
                    uri: 'https://example.com',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '1',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        transferMultiTokenTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e;
            const contractAddress = accounts ? accounts[0].address : (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.CONTRACT_ADDRESS;
            const privateKey = (_d = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.MULTITOKEN) === null || _d === void 0 ? void 0 : _d.PRIVATE_KEY;
            const provider = (_e = testData.TESTNET) === null || _e === void 0 ? void 0 : _e.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferMultiTokenTransaction({
                    tokenId: '123456',
                    to: '0x31a19a9E4BDd33982188BCb058a7E2a3515a8136',
                    contractAddress,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amount: '1',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferMultiTokenTransaction({
                    tokenId: '123456',
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    contractAddress,
                    amount: '1',
                    fromPrivateKey: accounts ? accounts[0].privateKey : privateKey,
                    fee: {
                        gasLimit: '299348',
                        gasPrice: '2',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.transferMultiTokenTransaction({
                        tokenId: '123456',
                        to: 'invalidaddress',
                        amount: '1',
                        contractAddress: contractAddress,
                        fromPrivateKey: privateKey,
                        fee: {
                            gasLimit: '259348',
                            gasPrice: '2',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        transferMultiTokenBatchTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e;
            const contractAddress = accounts ? accounts[0].address : (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.CONTRACT_ADDRESS;
            const privateKey = (_d = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.MULTITOKEN) === null || _d === void 0 ? void 0 : _d.PRIVATE_KEY;
            const provider = (_e = testData.TESTNET) === null || _e === void 0 ? void 0 : _e.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferMultiTokenBatchTransaction({
                    tokenId: ['123456', '12345644'],
                    to: '0x6c4A48886b77D1197eCFBDaA3D3f35d81d584342',
                    contractAddress,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amounts: ['5', '5'],
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferMultiTokenBatchTransaction({
                    tokenId: ['123456', '12345644'],
                    to: '0x6c4A48886b77D1197eCFBDaA3D3f35d81d584342',
                    contractAddress,
                    fromPrivateKey: accounts ? accounts[0].privateKey : privateKey,
                    amounts: ['5', '5'],
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.transferMultiTokenBatchTransaction({
                        tokenId: ['123456', '12345644'],
                        to: 'someinvalid',
                        contractAddress,
                        fromPrivateKey: privateKey,
                        amounts: ['5', '5'],
                        fee: {
                            gasLimit: '259348',
                            gasPrice: '2',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintMultiTokenTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e;
            const contractAddress = (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.CONTRACT_ADDRESS;
            const privateKey = (_d = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.MULTITOKEN) === null || _d === void 0 ? void 0 : _d.PRIVATE_KEY;
            const provider = (_e = testData.TESTNET) === null || _e === void 0 ? void 0 : _e.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultiTokenTransaction({
                    tokenId: '123456',
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    contractAddress: contractAddress,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amount: '1',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultiTokenTransaction({
                    tokenId: '123456',
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    contractAddress: contractAddress,
                    fromPrivateKey: accounts ? accounts[0].privateKey : privateKey,
                    amount: '1',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintMultiTokenTransaction({
                        tokenId: '123456',
                        to: 'invalidaddress',
                        contractAddress: contractAddress,
                        fromPrivateKey: privateKey,
                        amount: '1',
                        fee: {
                            gasLimit: '259348',
                            gasPrice: '2',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintMultiTokenBatchTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e;
            const contractAddress = (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.CONTRACT_ADDRESS;
            const privateKey = (_d = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.MULTITOKEN) === null || _d === void 0 ? void 0 : _d.PRIVATE_KEY;
            const provider = (_e = testData.TESTNET) === null || _e === void 0 ? void 0 : _e.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultiTokenBatchTransaction({
                    tokenId: [['123456'], ['12345644']],
                    to: ['0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9', '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9'],
                    contractAddress: contractAddress,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amounts: [['10', '10']],
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultiTokenBatchTransaction({
                    tokenId: [['123456'], ['12345644']],
                    to: ['0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9', '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9'],
                    contractAddress: contractAddress,
                    fromPrivateKey: accounts ? accounts[0].privateKey : privateKey,
                    amounts: [['10'], ['10']],
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintMultiTokenBatchTransaction({
                        tokenId: [['123456'], ['12345644']],
                        to: ['someinvalid', 'anotherinvalid'],
                        contractAddress: contractAddress,
                        fromPrivateKey: privateKey,
                        amounts: [['10'], ['10']],
                        fee: {
                            gasLimit: '259348',
                            gasPrice: '2',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        burnMultiTokenTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const contractAddress = accounts ? accounts[0].address : (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.CONTRACT_ADDRESS;
            const privateKey = (_d = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.MULTITOKEN) === null || _d === void 0 ? void 0 : _d.PRIVATE_KEY;
            const account = (_f = (_e = testData.TESTNET) === null || _e === void 0 ? void 0 : _e.MULTITOKEN) === null || _f === void 0 ? void 0 : _f.ADDRESS;
            const provider = (_g = testData.TESTNET) === null || _g === void 0 ? void 0 : _g.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.burnMultiTokenTransaction({
                    tokenId: new Date().getTime().toString(),
                    contractAddress: contractAddress,
                    account,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amount: '2',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.burnMultiTokenTransaction({
                    tokenId: new Date().getTime().toString(),
                    account,
                    contractAddress: contractAddress,
                    fromPrivateKey: accounts ? accounts[0].privateKey : privateKey,
                    amount: '2',
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        burnMultiTokenBatchTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e, _f;
            const contractAddress = accounts ? accounts[0].address : (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.CONTRACT_ADDRESS;
            const privateKey = (_d = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.MULTITOKEN) === null || _d === void 0 ? void 0 : _d.PRIVATE_KEY;
            const provider = (_e = testData.TESTNET) === null || _e === void 0 ? void 0 : _e.PROVIDER;
            const account = (_f = testData.TESTNET) === null || _f === void 0 ? void 0 : _f.MULTITOKEN.ADDRESS;
            const token1 = new Date().getTime() + 1;
            const token2 = new Date().getTime() + 2;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.burnMultiTokenBatchTransaction({
                    tokenId: [token1.toString(), token2.toString()],
                    contractAddress,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amounts: ['2', '2'],
                    account,
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('2000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const token1 = new Date().getTime() + 3;
                const token2 = new Date().getTime() + 4;
                const result = yield sdk.prepare.burnMultiTokenBatchTransaction({
                    tokenId: [token1.toString(), token2.toString()],
                    contractAddress,
                    fromPrivateKey: accounts ? accounts[0].privateKey : privateKey,
                    amounts: ['2', '2'],
                    account,
                    fee: {
                        gasLimit: '259348',
                        gasPrice: '2',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
    },
};
//# sourceMappingURL=evm-based.multitoken.test-factory.js.map