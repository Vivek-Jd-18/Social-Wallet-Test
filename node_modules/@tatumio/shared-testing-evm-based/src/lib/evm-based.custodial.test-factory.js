"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.custodialTestFactory = void 0;
const tslib_1 = require("tslib");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
exports.custodialTestFactory = {
    prepare: {
        transferFromCustodialWallet: (sdk, testData, chain) => {
            var _a;
            const provider = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.PROVIDER;
            const fromPrivateKey = testData.TESTNET.CUSTODIAL.PRIVATE_KEY;
            const signatureId = testData.TESTNET.CUSTODIAL.SIGNATURE_ID;
            const contractAddress = testData.TESTNET.CUSTODIAL.CONTRACT_ADDRESS;
            const tokenAddress = testData.TESTNET.CUSTODIAL.TOKEN_ADDRESS;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    const result = yield sdk.prepare.transferFromCustodialWallet({
                        chain,
                        signatureId,
                        custodialAddress: contractAddress,
                        recipient: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                        tokenAddress,
                        amount: '1',
                        contractType: 0,
                        fee: { gasLimit: '100000', gasPrice: '3' },
                    }, provider, true);
                    const json = JSON.parse(result);
                    (0, shared_testing_common_1.expectHexString)(json.data);
                }
                catch (e) {
                    console.log(e);
                    expect(e).not.toBeDefined();
                }
            }));
            it('valid with privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferFromCustodialWallet({
                    chain,
                    fromPrivateKey,
                    custodialAddress: contractAddress,
                    recipient: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    tokenAddress,
                    amount: '1',
                    contractType: 0,
                    fee: { gasLimit: '100000', gasPrice: '3' },
                }, provider, true);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        batchTransferFromCustodialWallet: (sdk, testData, chain) => {
            var _a;
            const provider = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.PROVIDER;
            const fromPrivateKey = '0x37b091fc4ce46a56da643f021254612551dbe0944679a6e09cb5724d3085c9ab';
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.batchTransferFromCustodialWallet({
                    chain,
                    signatureId: '695a3b3e-649f-4e5b-9524-c388c4f45230',
                    custodialAddress: '0x009bc01b990e2781e8a961fd792f4ebb12a683b4',
                    tokenId: ['0', '1', '0'],
                    amount: ['1', '1', '0.00001'],
                    contractType: [0, 2, 3],
                    tokenAddress: [
                        '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867',
                        '0x0fd723c4db392f4bc4b999eaacd2b4a8099fefa3',
                        '0',
                    ],
                    recipient: [
                        '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                        '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                        '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    ],
                }, provider, true);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.batchTransferFromCustodialWallet({
                    chain,
                    fromPrivateKey,
                    fee: { gasLimit: '100000', gasPrice: '3' },
                    custodialAddress: '0x009bc01b990e2781e8a961fd792f4ebb12a683b4',
                    tokenId: ['0', '1', '0'],
                    amount: ['1', '1', '0.00001'],
                    contractType: [0, 2, 3],
                    tokenAddress: [
                        '0xec5dcb5dbf4b114c9d0f65bccab49ec54f6a0867',
                        '0x0fd723c4db392f4bc4b999eaacd2b4a8099fefa3',
                        '0',
                    ],
                    recipient: [
                        '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                        '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                        '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    ],
                }, provider, true);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        approveFromCustodialWallet: (sdk, testData, chain) => {
            var _a, _b, _c;
            const provider = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.PROVIDER;
            const fromPrivateKey = (_c = (_b = testData.TESTNET) === null || _b === void 0 ? void 0 : _b.MULTITOKEN) === null || _c === void 0 ? void 0 : _c.PRIVATE_KEY;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.approveFromCustodialWallet({
                    chain,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    contractType: 0,
                    custodialAddress: '0x95abdd7406a6aca49797e833bacc3edaa394853a',
                    tokenAddress: '0x0fd723c4db392f4bc4b999eaacd2b4a8099fefa3',
                    spender: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    tokenId: '1',
                    amount: '1',
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.approveFromCustodialWallet({
                    chain,
                    fromPrivateKey,
                    contractType: 0,
                    custodialAddress: '0x95abdd7406a6aca49797e833bacc3edaa394853a',
                    tokenAddress: '0x0fd723c4db392f4bc4b999eaacd2b4a8099fefa3',
                    spender: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    tokenId: '1',
                    amount: '1',
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        custodialWalletBatch: (sdk, testData, chain) => {
            var _a, _b, _c;
            const provider = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.PROVIDER;
            const fromPrivateKey = (_c = (_b = testData.TESTNET) === null || _b === void 0 ? void 0 : _b.MULTITOKEN) === null || _c === void 0 ? void 0 : _c.PRIVATE_KEY;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.custodialWalletBatch({
                    chain,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    owner: '0x0fd723c4db392f4bc4b999eaacd2b4a8099fefa3',
                    batchCount: 10,
                }, provider, true);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.custodialWalletBatch({
                    chain,
                    fromPrivateKey,
                    owner: '0x0fd723c4db392f4bc4b999eaacd2b4a8099fefa3',
                    batchCount: 10,
                }, provider, true);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
    },
};
//# sourceMappingURL=evm-based.custodial.test-factory.js.map