"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.erc20TestFactory = void 0;
const tslib_1 = require("tslib");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
exports.erc20TestFactory = {
    decimals: (sdk, testData) => {
        it('valid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield sdk.decimals(testData.TESTNET.ERC_20.CONTRACT_ADDRESS, testData.TESTNET.PROVIDER);
            expect(result).toBeDefined();
        }));
    },
    prepare: {
        deploySignedTransaction: (sdk, accounts) => {
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 3252345722143;
                const result = yield sdk.prepare.deploySignedTransaction({
                    symbol: 'ERC_SYMBOL',
                    name: 'bO6AN',
                    address: accounts[0].address,
                    supply: '10000000',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    digits: 18,
                    totalCap: '10000000',
                    nonce,
                    fee: {
                        gasLimit: '171864',
                        gasPrice: '20',
                    },
                });
                const json = JSON.parse(result);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 3252345722143;
                const result = yield sdk.prepare.deploySignedTransaction({
                    symbol: 'ERC_SYMBOL',
                    name: 'bO6AN',
                    address: accounts[0].address,
                    supply: '10000000',
                    fromPrivateKey: accounts[0].privateKey,
                    digits: 18,
                    totalCap: '10000000',
                    nonce,
                    fee: {
                        gasLimit: '171864',
                        gasPrice: '20',
                    },
                });
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.deploySignedTransaction({
                        symbol: 'ERC_SYMBOL',
                        name: 'bO6AN',
                        address: 'someinvalidaddress',
                        supply: '10000000',
                        fromPrivateKey: '@TODO',
                        digits: 18,
                        totalCap: '10000000',
                        nonce: 3252345722143,
                        fee: {
                            gasLimit: '171864',
                            gasPrice: '20',
                        },
                    });
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        transferSignedTransaction: (sdk, accounts) => {
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 3252345722143;
                const result = yield sdk.prepare.transferSignedTransaction({
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    amount: '10',
                    contractAddress: accounts[0].address,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    digits: 18,
                    nonce,
                    fee: {
                        gasLimit: '53632',
                        gasPrice: '20',
                    },
                });
                const json = JSON.parse(result);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 3252345722143;
                const result = yield sdk.prepare.transferSignedTransaction({
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    amount: '10',
                    contractAddress: accounts[0].address,
                    fromPrivateKey: accounts[0].privateKey,
                    digits: 18,
                    nonce,
                    fee: {
                        gasLimit: '53632',
                        gasPrice: '20',
                    },
                });
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.transferSignedTransaction({
                        to: 'someinvalidaddress',
                        contractAddress: accounts[0].address,
                        amount: '10',
                        fromPrivateKey: accounts[0].privateKey,
                        digits: 18,
                        nonce: 3252345722143,
                        fee: {
                            gasLimit: '53632',
                            gasPrice: '20',
                        },
                    });
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintSignedTransaction: (sdk, testData) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintSignedTransaction({
                    to: testData.TESTNET.ERC_20.ADDRESS,
                    amount: '10',
                    contractAddress: testData.TESTNET.ERC_20.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_20.PRIVATE_KEY,
                }, testData.TESTNET.PROVIDER);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        approveSignedTransaction: (sdk, testData) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 3252345722143;
                const result = yield sdk.prepare.approveSignedTransaction({
                    amount: '1',
                    contractAddress: testData.TESTNET.ERC_20.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_20.PRIVATE_KEY,
                    spender: testData.TESTNET.ADDRESS_100,
                    nonce,
                }, testData.TESTNET.PROVIDER);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        burnSignedTransaction: (sdk, testData) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 3252345722143;
                const result = yield sdk.prepare.burnSignedTransaction({
                    amount: '10',
                    contractAddress: testData.TESTNET.ERC_20.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_20.PRIVATE_KEY,
                    nonce,
                }, testData.TESTNET.PROVIDER);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
    },
};
//# sourceMappingURL=evm-based.erc20.test-factory.js.map