"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.auctionTestFactory = void 0;
const tslib_1 = require("tslib");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
const evm_based_utils_1 = require("./evm-based.utils");
const nonce = 1;
exports.auctionTestFactory = {
    prepare: {
        deployAuctionSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.deployAuctionSignedTransaction({
                    chain,
                    feeRecipient: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    auctionFee: 150,
                    fromPrivateKey: accounts[0].privateKey,
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.deployAuctionSignedTransaction({
                    chain,
                    feeRecipient: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    auctionFee: 150,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    nonce,
                    fee: {
                        gasLimit: '300000',
                        gasPrice: '20',
                    },
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.deployAuctionSignedTransaction({
                        chain,
                        feeRecipient: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        auctionFee: 150,
                        fromPrivateKey: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2',
                        nonce: nonce,
                        fee: {
                            gasLimit: '300000',
                            gasPrice: '20',
                        },
                    });
                })).rejects.toThrow('bad address checksum (argument="address", value="0x687422eEA2cB73B5d3e242bA5456b782919AFc86", code=INVALID_ARGUMENT, version=address/5.7.0) (argument="feeRecipient", value="0x687422eEA2cB73B5d3e242bA5456b782919AFc86", code=INVALID_ARGUMENT, version=abi/5.7.0)');
            }));
        },
        auctionUpdateFeeRecipientSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionUpdateFeeRecipientSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    feeRecipient: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    fromPrivateKey: accounts[0].privateKey,
                    amount: '1',
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionUpdateFeeRecipientSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    feeRecipient: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                    amount: '10000',
                    nonce,
                });
                const json = JSON.parse(tx);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.auctionUpdateFeeRecipientSignedTransaction({
                        chain,
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        feeRecipient: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                        fromPrivateKey: accounts[0].privateKey,
                        fee: {
                            gasLimit: '40000',
                            gasPrice: '20',
                        },
                        amount: '0.001',
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
        createAuctionSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.createAuctionSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    nftAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    seller: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    erc20Address: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    id: 'string',
                    amount: '1',
                    tokenId: '100000',
                    endedAt: 100000,
                    isErc721: true,
                    fromPrivateKey: accounts[0].privateKey,
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.createAuctionSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    nftAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    seller: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    erc20Address: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    id: 'string',
                    amount: '1',
                    tokenId: '100000',
                    endedAt: 100000,
                    isErc721: true,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    nonce,
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.createAuctionSignedTransaction({
                        chain,
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        nftAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                        seller: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                        erc20Address: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                        id: 'string',
                        amount: '1',
                        tokenId: '100000',
                        endedAt: 100000,
                        isErc721: true,
                        fromPrivateKey: accounts[0].privateKey,
                        nonce,
                        fee: {
                            gasLimit: '40000',
                            gasPrice: '20',
                        },
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
        auctionApproveNftTransferSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionApproveNftTransferSignedTransaction({
                    chain,
                    spender: accounts[0].address,
                    isErc721: true,
                    tokenId: '100000',
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    fromPrivateKey: accounts[0].privateKey,
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionApproveNftTransferSignedTransaction({
                    chain,
                    spender: accounts[0].address,
                    isErc721: true,
                    tokenId: '100000',
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                    nonce,
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.auctionApproveNftTransferSignedTransaction({
                        chain,
                        spender: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                        isErc721: true,
                        tokenId: '100000',
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        fromPrivateKey: accounts[0].privateKey,
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
        auctionApproveErc20TransferSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionApproveErc20TransferSignedTransaction({
                    chain,
                    spender: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    fromPrivateKey: accounts[0].privateKey,
                    amount: '100',
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionApproveErc20TransferSignedTransaction({
                    chain,
                    spender: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amount: '100',
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                    nonce,
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.auctionApproveErc20TransferSignedTransaction({
                        chain,
                        spender: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        fromPrivateKey: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2',
                        amount: '100',
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
        auctionBidSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionBidSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    bidder: accounts[0].address,
                    id: 'string',
                    bidValue: '1',
                    fromPrivateKey: accounts[0].privateKey,
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionBidSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    bidder: accounts[0].address,
                    id: 'string',
                    bidValue: '1',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                    nonce,
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.auctionBidSignedTransaction({
                        chain,
                        contractAddress: '0x487422eEA2cB73B5d3e242bA5456b782919AFc85',
                        bidder: '0x587422eEA2cB73B5d3e242bA5456b782919AFc85',
                        id: 'string',
                        bidValue: '1',
                        fromPrivateKey: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2',
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
        auctionCancelSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionCancelSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    id: 'string',
                    fromPrivateKey: accounts[0].privateKey,
                    amount: '1',
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionCancelSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    id: 'string',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amount: '1',
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                    nonce,
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.auctionCancelSignedTransaction({
                        chain,
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        id: 'string',
                        fromPrivateKey: '0x05e150c73f1920ec14caa1e0b6aa09940899678051a78542840c2668ce5080c2',
                        amount: '1',
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
        auctionSettleSignedTransaction: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionSettleSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    id: 'string',
                    fromPrivateKey: accounts[0].privateKey,
                    amount: '1',
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.auctionSettleSignedTransaction({
                    chain,
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    id: 'string',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    amount: '10000',
                    nonce,
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.auctionSettleSignedTransaction({
                        chain,
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        id: 'string',
                        fromPrivateKey: accounts[0].privateKey,
                        amount: '0.001',
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
    },
};
//# sourceMappingURL=evm-based.auction.test-factory.js.map