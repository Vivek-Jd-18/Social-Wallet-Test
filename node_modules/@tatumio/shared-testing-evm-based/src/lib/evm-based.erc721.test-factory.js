"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.erc721TestFactory = void 0;
const tslib_1 = require("tslib");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
exports.erc721TestFactory = {
    prepare: {
        deploySignedTransaction: (sdk, testData) => {
            jest.setTimeout(99999);
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.deploySignedTransaction({
                    symbol: 'ERC_SYMBOL',
                    name: '2123kd',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    fee: {
                        gasLimit: '326580',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('20000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.deploySignedTransaction({
                    symbol: 'ERC_SYMBOL',
                    name: 'bO6AN',
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    fee: {
                        gasLimit: '326580',
                        gasPrice: '1',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        transferSignedTransaction: (sdk, testData) => {
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferSignedTransaction({
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    tokenId: '112345678',
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    fee: {
                        gasLimit: '50000',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                expect(json.gasPrice).toBe('20000000000');
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.transferSignedTransaction({
                    to: '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9',
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: '112345678',
                    fee: {
                        gasLimit: '50000',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.transferSignedTransaction({
                        to: 'someinvalidaddress',
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        nonce: 3252345722143,
                        tokenId: '112345678',
                        fee: {
                            gasLimit: '50000',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintSignedTransaction: (sdk, testData) => {
            var _a, _b;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            const address = ((_a = testData.TESTNET.ERC_721) === null || _a === void 0 ? void 0 : _a.ADDRESS)
                ? (_b = testData.TESTNET.ERC_721) === null || _b === void 0 ? void 0 : _b.ADDRESS
                : '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintSignedTransaction({
                    to: address,
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: new Date().getTime().toString(),
                    url: 'https://my_token_data.com',
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintSignedTransaction({
                    to: address,
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: new Date().getTime().toString(),
                    url: 'https://my_token_data.com',
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintSignedTransaction({
                        to: 'someinvalidaddress',
                        tokenId: new Date().getTime().toString(),
                        url: 'https://my_token_data.com',
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        fee: {
                            gasLimit: '3264521',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintMultipleSignedTransaction: (sdk, testData) => {
            var _a, _b;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            const address = ((_a = testData.TESTNET.ERC_721) === null || _a === void 0 ? void 0 : _a.ADDRESS)
                ? (_b = testData.TESTNET.ERC_721) === null || _b === void 0 ? void 0 : _b.ADDRESS
                : '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultipleSignedTransaction({
                    to: [address, address],
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                    url: ['https://my_token_data.com', 'https://my_token_data.com'],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultipleSignedTransaction({
                    to: [address, address],
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                    url: ['https://my_token_data.com', 'https://my_token_data.com'],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintMultipleSignedTransaction({
                        to: ['invalid', 'invalid'],
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                        url: ['https://my_token_data.com', 'https://my_token_data.com'],
                        fee: {
                            gasLimit: '3264521',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintCashbackSignedTransaction: (sdk, testData) => {
            var _a, _b;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            const address = ((_a = testData.TESTNET.ERC_721) === null || _a === void 0 ? void 0 : _a.ADDRESS)
                ? (_b = testData.TESTNET.ERC_721) === null || _b === void 0 ? void 0 : _b.ADDRESS
                : '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintCashbackSignedTransaction({
                    to: address,
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: new Date().getTime().toString(),
                    url: 'https://my_token_data.com',
                    cashbackValues: ['0.5'],
                    authorAddresses: [address],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintCashbackSignedTransaction({
                    to: address,
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: new Date().getTime().toString(),
                    url: 'https://my_token_data.com',
                    cashbackValues: ['0.5'],
                    authorAddresses: [address],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintCashbackSignedTransaction({
                        to: 'someinvalidaddress',
                        tokenId: new Date().getTime().toString(),
                        url: 'https://my_token_data.com',
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        cashbackValues: ['0.5'],
                        authorAddresses: [address],
                        fee: {
                            gasLimit: '3264521',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintProvenanceSignedTransaction: (sdk, testData, accounts, inMemoryProvider) => {
            var _a, _b;
            const provider = inMemoryProvider ? inMemoryProvider : testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            const address = ((_a = testData.TESTNET.ERC_721) === null || _a === void 0 ? void 0 : _a.ADDRESS)
                ? (_b = testData.TESTNET.ERC_721) === null || _b === void 0 ? void 0 : _b.ADDRESS
                : '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintProvenanceSignedTransaction({
                    to: address,
                    contractAddress: accounts ? accounts[0].address : testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: accounts ? accounts[0].privateKey : testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: new Date().getTime().toString(),
                    url: 'https://my_token_data.com',
                    authorAddresses: [address],
                    provenance: true,
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintProvenanceSignedTransaction({
                    to: address,
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: new Date().getTime().toString(),
                    url: 'https://my_token_data.com',
                    provenance: true,
                    authorAddresses: [address],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintProvenanceSignedTransaction({
                        to: 'someinvalidaddress',
                        tokenId: new Date().getTime().toString(),
                        url: 'https://my_token_data.com',
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        provenance: true,
                        authorAddresses: [address],
                        fee: {
                            gasLimit: '3264521',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintMultipleCashbackSignedTransaction: (sdk, testData) => {
            var _a, _b;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            const address = ((_a = testData.TESTNET.ERC_721) === null || _a === void 0 ? void 0 : _a.ADDRESS)
                ? (_b = testData.TESTNET.ERC_721) === null || _b === void 0 ? void 0 : _b.ADDRESS
                : '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultipleCashbackSignedTransaction({
                    to: [address, address],
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                    url: ['https://my_token_data.com', 'https://my_token_data.com'],
                    cashbackValues: [['0.5'], ['0.5']],
                    authorAddresses: [[address], [address]],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultipleSignedTransaction({
                    to: [address, address],
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                    url: ['https://my_token_data.com', 'https://my_token_data.com'],
                    cashbackValues: [['0.5'], ['0.5']],
                    authorAddresses: [[address], [address]],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintMultipleSignedTransaction({
                        to: ['invalid', 'invalid'],
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                        url: ['https://my_token_data.com', 'https://my_token_data.com'],
                        cashbackValues: [['0.5'], ['0.5']],
                        fee: {
                            gasLimit: '3264521',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        mintMultipleProvenanceSignedTransaction: (sdk, testData, accounts) => {
            var _a, _b;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            const address = ((_a = testData.TESTNET.ERC_721) === null || _a === void 0 ? void 0 : _a.ADDRESS)
                ? (_b = testData.TESTNET.ERC_721) === null || _b === void 0 ? void 0 : _b.ADDRESS
                : '0x811DfbFF13ADFBC3Cf653dCc373C03616D3471c9';
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultipleProvenanceSignedTransaction({
                    to: [address, address],
                    contractAddress: accounts ? accounts[0].address : testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: accounts ? accounts[0].privateKey : testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                    url: ['https://my_token_data.com', 'https://my_token_data.com'],
                    authorAddresses: [[address], [address]],
                    fixedValues: [['1'], ['2']],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.mintMultipleProvenanceSignedTransaction({
                    to: [address, address],
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                    url: ['https://my_token_data.com', 'https://my_token_data.com'],
                    fixedValues: [['1'], ['2']],
                    authorAddresses: [[address], [address]],
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield sdk.prepare.mintMultipleProvenanceSignedTransaction({
                        to: ['invalid', 'invalid'],
                        contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                        fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                        tokenId: [new Date().getTime().toString(), new Date().getTime().toString()],
                        url: ['https://my_token_data.com', 'https://my_token_data.com'],
                        fixedValues: [['1'], ['2']],
                        fee: {
                            gasLimit: '3264521',
                            gasPrice: '20',
                        },
                    }, provider);
                    fail();
                }
                catch (e) {
                    expect(e.reason).toMatch('invalid address');
                }
            }));
        },
        updateCashbackForAuthorSignedTransaction: (sdk, testData) => {
            const provider = testData.PROVIDER;
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.updateCashbackForAuthorSignedTransaction({
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    tokenId: new Date().getTime().toString(),
                    cashbackValue: '0.8',
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.updateCashbackForAuthorSignedTransaction({
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: new Date().getTime().toString(),
                    cashbackValue: '0.8',
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
        },
        burnSignedTransaction: (sdk, testData) => {
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.burnSignedTransaction({
                    tokenId: new Date().getTime().toString(),
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    fromPrivateKey: testData.TESTNET.ERC_721.PRIVATE_KEY,
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
            it('valid from SignatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.burnSignedTransaction({
                    contractAddress: testData.TESTNET.ERC_721.CONTRACT_ADDRESS,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    tokenId: new Date().getTime().toString(),
                    fee: {
                        gasLimit: '3264521',
                        gasPrice: '20',
                    },
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
        },
    },
};
//# sourceMappingURL=evm-based.erc721.test-factory.js.map