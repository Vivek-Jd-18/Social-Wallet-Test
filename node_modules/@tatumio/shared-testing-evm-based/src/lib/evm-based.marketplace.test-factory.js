"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.marketplaceTestFactory = void 0;
const tslib_1 = require("tslib");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
const evm_based_utils_1 = require("./evm-based.utils");
exports.marketplaceTestFactory = {
    prepare: {
        generateMarketplace: (sdk, testData, chain, accounts) => {
            jest.setTimeout(99999);
            const nonce = 3252345722143;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.generateMarketplace({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    feeRecipient: accounts[0].address,
                    marketplaceFee: 150,
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    nonce,
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.generateMarketplace({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '2',
                    },
                    feeRecipient: accounts[0].address,
                    marketplaceFee: 150,
                    fromPrivateKey: accounts[0].privateKey,
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        sellMarketplaceListing: (sdk, testData, chain, accounts) => {
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.sellMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    contractAddress: '0xd093bEd4BC06403bfEABB54667B42C48533D3Fd9',
                    nftAddress: '0x1214BEada6b25bc98f7494C7BDBf22C095FDCaBD',
                    tokenId: '33333',
                    listingId: '1',
                    isErc721: true,
                    price: '1',
                    seller: '0x48d4bA7B2698A4b89635b9a2E391152350DB740f',
                });
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.sellMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    fromPrivateKey: accounts[0].privateKey,
                    contractAddress: '0xd093bEd4BC06403bfEABB54667B42C48533D3Fd9',
                    nftAddress: '0x1214BEada6b25bc98f7494C7BDBf22C095FDCaBD',
                    tokenId: '33333',
                    listingId: '1',
                    isErc721: true,
                    price: '1',
                    seller: '0x48d4bA7B2698A4b89635b9a2E391152350DB740f',
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        buyMarketplaceListing: (sdk, testData, chain, accounts) => {
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.buyMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    contractAddress: '0xd093bEd4BC06403bfEABB54667B42C48533D3Fd9',
                    listingId: '1',
                    amount: '1.015',
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.buyMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    fromPrivateKey: accounts[0].privateKey,
                    contractAddress: '0xd093bEd4BC06403bfEABB54667B42C48533D3Fd9',
                    listingId: '1',
                    amount: '1.015',
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        // @TODO Fails with "Returned values aren't valid..." (probably false address keys)
        buyMarketplaceListingErc20: (sdk, testData, chain, accounts) => {
            jest.setTimeout(99999);
            const nonce = 3252345722143;
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('approved for erc20 spending', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const approve = yield sdk.prepare.approveErc20Spending({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    fromPrivateKey: accounts[0].privateKey,
                    contractAddress: '0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1',
                    spender: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    amount: '0.0002',
                    nonce,
                }, provider);
                const json = JSON.parse(approve);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.buyMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    contractAddress: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    erc20Address: 'xxx',
                    listingId: '2',
                    amount: '1.015',
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.buyMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    fromPrivateKey: accounts[0].privateKey,
                    contractAddress: '0x8cb76aEd9C5e336ef961265c6079C14e9cD3D2eA',
                    erc20Address: 'xxx',
                    listingId: '2',
                    amount: '1.015',
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        cancelMarketplaceListing: (sdk, testData, chain, accounts) => {
            const provider = testData === null || testData === void 0 ? void 0 : testData.PROVIDER;
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.cancelMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    contractAddress: '0xd093bEd4BC06403bfEABB54667B42C48533D3Fd9',
                    listingId: '1',
                }, provider);
                const json = JSON.parse(result);
                (0, shared_testing_common_1.expectHexString)(json.data);
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const result = yield sdk.prepare.cancelMarketplaceListing({
                    chain,
                    fee: {
                        gasLimit: '1000000',
                        gasPrice: '20',
                    },
                    fromPrivateKey: testData.TESTNET.PRIVATE_KEY_0,
                    contractAddress: testData.TESTNET.CONTRACT_ADDRESS,
                    listingId: '1',
                }, provider);
                (0, shared_testing_common_1.expectHexString)(result);
            }));
        },
        approveSpending: (sdk, accounts, chain) => {
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const tx = yield sdk.prepare.approveSpending({
                    spender: accounts[0].address,
                    isErc721: true,
                    tokenId: '100000',
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    fromPrivateKey: accounts[0].privateKey,
                    chain,
                });
                (0, shared_testing_common_1.expectHexString)(tx);
            }));
            it('valid from signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const nonce = 1;
                const tx = yield sdk.prepare.approveSpending({
                    spender: accounts[0].address,
                    isErc721: true,
                    tokenId: '100000',
                    contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    nonce,
                    fee: {
                        gasLimit: '40000',
                        gasPrice: '20',
                    },
                    chain,
                });
                const json = JSON.parse(tx);
                expect(json.nonce).toBe(nonce);
                expect(json.gasPrice).toBe('20000000000');
            }));
            it('invalid address', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield expect(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                    return sdk.prepare.approveSpending({
                        spender: '0x687422eEA2cB73B5d3e242bA5456b782919AFc85',
                        isErc721: true,
                        tokenId: '100000',
                        contractAddress: '0x687422eEA2cB73B5d3e242bA5456b782919AFc86',
                        fromPrivateKey: accounts[0].privateKey,
                        chain,
                    });
                })).rejects.toThrowErrorWithMessageThatIncludes((0, evm_based_utils_1.invalidProvidedAddressWeb3ErrorMessage)('0x687422eEA2cB73B5d3e242bA5456b782919AFc86'));
            }));
        },
    },
};
//# sourceMappingURL=evm-based.marketplace.test-factory.js.map