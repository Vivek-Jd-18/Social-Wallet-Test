"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ganacheHelper = void 0;
const tslib_1 = require("tslib");
const ganache = tslib_1.__importStar(require("ganache"));
const web3_1 = tslib_1.__importDefault(require("web3"));
const shared_core_1 = require("@tatumio/shared-core");
const shared_testing_common_1 = require("@tatumio/shared-testing-common");
exports.ganacheHelper = {
    /**
     * Don't forget to call init!
     */
    inmemoryBlockchain: (blockchain, args) => {
        var _a, _b, _c;
        const options = {
            wallet: {
                mnemonic: (_a = args === null || args === void 0 ? void 0 : args.mnemonic) !== null && _a !== void 0 ? _a : shared_testing_common_1.TEST_DATA.MNEMONIC,
                allowUnlimitedContractSize: true,
                hdPath: shared_core_1.DERIVATION_PATH[blockchain],
                defaultBalance: (_b = args === null || args === void 0 ? void 0 : args.defaultBalance) !== null && _b !== void 0 ? _b : 10,
                totalAccounts: (_c = args === null || args === void 0 ? void 0 : args.totalAccounts) !== null && _c !== void 0 ? _c : 10,
            },
            miner: {
                blockTime: 0,
            },
            logging: {
                quiet: true,
            },
        };
        const provider = ganache.provider(options);
        const initialAccounts = provider.getInitialAccounts();
        const web3 = new web3_1.default(provider);
        web3.eth.accounts.wallet.add(initialAccounts[Object.keys(initialAccounts)[0]].secretKey);
        web3.eth.defaultAccount = Object.keys(initialAccounts)[0];
        Object.keys(initialAccounts).forEach((k) => ({
            address: k,
            privateKey: initialAccounts[k].secretKey,
        }));
        return {
            web3,
            accounts: Object.keys(initialAccounts).map((k) => ({
                address: k,
                privateKey: initialAccounts[k].secretKey,
            })),
        };
    },
    initWeb3: (web3) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        yield web3.eth.getAccounts(); // Needed to init web3
    }),
};
//# sourceMappingURL=ganacheHelper.js.map