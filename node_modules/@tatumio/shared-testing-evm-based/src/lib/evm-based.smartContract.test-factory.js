"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.smartContractTestFactory = void 0;
const tslib_1 = require("tslib");
exports.smartContractTestFactory = {
    prepare: {
        smartContractWriteMethodInvocationTransaction: (sdk, testData, accounts) => {
            var _a, _b, _c, _d, _e;
            const fromPrivateKey = accounts ? accounts[0].privateKey : (_b = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.MULTITOKEN) === null || _b === void 0 ? void 0 : _b.PRIVATE_KEY;
            const provider = (_c = testData.TESTNET) === null || _c === void 0 ? void 0 : _c.PROVIDER;
            const contractAddress = (_e = (_d = testData.TESTNET) === null || _d === void 0 ? void 0 : _d.MULTITOKEN) === null || _e === void 0 ? void 0 : _e.CONTRACT_ADDRESS;
            it('valid with signatureId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const resultWithSignatureId = yield sdk.prepare.smartContractWriteMethodInvocationTransaction({
                    contractAddress,
                    methodName: 'transferFrom',
                    methodABI: {
                        constant: false,
                        inputs: [
                            {
                                name: 'from',
                                type: 'address',
                            },
                            {
                                name: 'to',
                                type: 'address',
                            },
                            {
                                name: 'value',
                                type: 'uint256',
                            },
                        ],
                        name: 'transferFrom',
                        outputs: [
                            {
                                name: '',
                                type: 'bool',
                            },
                        ],
                        payable: false,
                        stateMutability: 'nonpayable',
                        type: 'function',
                    },
                    params: [
                        '0x811dfbff13adfbc3cf653dcc373c03616d3471c9',
                        '0x8c76887d2e738371bd750362fb55887343472346',
                        '1',
                    ],
                    signatureId: 'cac88687-33ed-4ca1-b1fc-b02986a90975',
                    fee: { gasLimit: '50000', gasPrice: '3' },
                }, provider);
                expect(resultWithSignatureId).not.toBeNull();
            }));
            it('valid from privateKey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const resultWithPrivateKey = yield sdk.prepare.smartContractWriteMethodInvocationTransaction({
                    contractAddress,
                    methodName: 'transferFrom',
                    methodABI: {
                        constant: false,
                        inputs: [
                            {
                                name: 'from',
                                type: 'address',
                            },
                            {
                                name: 'to',
                                type: 'address',
                            },
                            {
                                name: 'value',
                                type: 'uint256',
                            },
                        ],
                        name: 'transferFrom',
                        outputs: [
                            {
                                name: '',
                                type: 'bool',
                            },
                        ],
                        payable: false,
                        stateMutability: 'nonpayable',
                        type: 'function',
                    },
                    params: [
                        '0x811dfbff13adfbc3cf653dcc373c03616d3471c9',
                        '0x8c76887d2e738371bd750362fb55887343472346',
                        '1',
                    ],
                    fromPrivateKey,
                    fee: { gasLimit: '100000', gasPrice: '3' },
                }, provider);
                expect(resultWithPrivateKey).not.toBeNull();
            }));
        },
    },
    send: {
        smartContractReadMethodInvocationTransaction: (sdk, testData) => {
            var _a, _b, _c;
            const provider = (_a = testData.TESTNET) === null || _a === void 0 ? void 0 : _a.PROVIDER;
            const contractAddress = (_c = (_b = testData.TESTNET) === null || _b === void 0 ? void 0 : _b.SMART_CONTRACT) === null || _c === void 0 ? void 0 : _c.CONTRACT_ADDRESS;
            it('should invoke smart contract read', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                try {
                    const result = yield sdk.send.smartContractReadMethodInvocationTransaction({
                        contractAddress,
                        methodName: 'balanceOf',
                        methodABI: {
                            constant: true,
                            inputs: [
                                {
                                    name: 'owner',
                                    type: 'address',
                                },
                            ],
                            name: 'balanceOf',
                            outputs: [
                                {
                                    name: '',
                                    type: 'uint256',
                                },
                            ],
                            payable: false,
                            stateMutability: 'view',
                            type: 'function',
                        },
                        params: ['0x9ac64cc6e4415144c455bd8e4837fea55603e5c3'],
                    }, provider);
                    expect(result).not.toBeNull();
                }
                catch (e) {
                    expect(e).not.toBeDefined();
                }
            }));
        },
    },
};
//# sourceMappingURL=evm-based.smartContract.test-factory.js.map