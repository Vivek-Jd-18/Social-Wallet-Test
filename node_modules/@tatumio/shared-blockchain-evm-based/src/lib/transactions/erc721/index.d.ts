import { BroadcastFunction, ChainAddMinterErc721, ChainBurnErc721, ChainDeployErc721, ChainMintErc721, ChainMintMultipleNft, ChainTransferErc721, ChainUpdateCashbackErc721 } from '@tatumio/shared-blockchain-abstract';
import { EvmBasedWeb3 } from '../../services/evm-based.web3';
import { AddressTransformer } from '../../evm-based.utils';
import { MintNftMinter, TransactionHash } from '@tatumio/api-client';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const mintMultipleCashbackSignedTransaction: ({ body, web3, provider, addressTransformer, }: {
    body: ChainMintMultipleNft;
    web3: EvmBasedWeb3;
    provider?: string;
    addressTransformer: AddressTransformer;
}) => Promise<string>;
export declare const erc721: ({ blockchain, web3, broadcastFunction, addressTransformer, }: {
    blockchain: EvmBasedBlockchain;
    web3: EvmBasedWeb3;
    broadcastFunction: BroadcastFunction;
    addressTransformer?: AddressTransformer;
}) => {
    prepare: {
        /**
         * Sign mint ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintSignedTransaction: (body: ChainMintErc721, provider?: string) => Promise<string>;
        /**
         * Sign mint ERC 721 transaction with cashback via private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintCashbackSignedTransaction: (body: ChainMintErc721, provider?: string) => Promise<string>;
        /**
         * Sign mint multiple ERC 721 Cashback transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultipleCashbackSignedTransaction: (body: ChainMintMultipleNft, provider?: string) => Promise<string>;
        /**
         * Sign mint multiple ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultipleSignedTransaction: (body: ChainMintMultipleNft, provider?: string) => Promise<string>;
        /**
         * Sign burn ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        burnSignedTransaction: (body: ChainBurnErc721, provider?: string) => Promise<string>;
        /**
         * Sign transfer ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        transferSignedTransaction: (body: ChainTransferErc721, provider?: string) => Promise<string>;
        /**
         * Sign update cashback ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        updateCashbackForAuthorSignedTransaction: (body: ChainUpdateCashbackErc721, provider?: string) => Promise<string>;
        /**
         * Sign deploy ERC 721 transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        deploySignedTransaction: (body: ChainDeployErc721, provider?: string) => Promise<string>;
        /**
         * Sign mint ERC 721 provenance transaction with cashback via private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintProvenanceSignedTransaction: (body: ChainMintErc721, provider?: string) => Promise<string>;
        /**
         * Sign mint multiple ERC 721 Cashback transaction with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        mintMultipleProvenanceSignedTransaction: (body: ChainMintMultipleNft & {
            fixedValues: string[][];
        }, provider?: string) => Promise<string>;
        /**
         * Sign add minter to ERC 721 with private keys locally. Nothing is broadcast to the blockchain.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction data to be broadcast to blockchain.
         */
        addMinterSignedTransaction: (body: ChainAddMinterErc721, provider: string) => Promise<string>;
    };
    send: {
        /**
         * Send BEP721 mint transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintSignedTransaction: (body: ChainMintErc721 | MintNftMinter, provider?: string) => Promise<string | TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
        /**
         * Send BEP721 mint transaction to the blockchain with cashback details. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintCashbackSignedTransaction: (body: ChainMintErc721, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
        /**
         * Send BEP721 mint multiple transaction with cashback to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintMultipleCashbackSignedTransaction: (body: ChainMintMultipleNft, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
        /**
         * Send BEP721 mint multiple transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintMultipleSignedTransaction: (body: ChainMintMultipleNft, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
        /**
         * Send BEP721 burn transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the  Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        burnSignedTransaction: (body: ChainBurnErc721, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send BEP721 transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        transferSignedTransaction: (body: ChainTransferErc721, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send BEP721 update cashback to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        updateCashbackForAuthorSignedTransaction: (body: ChainUpdateCashbackErc721, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send BEP721 deploy to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        deploySignedTransaction: (body: ChainDeployErc721, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId>;
        /**
         * Send BEP721 mint provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintProvenanceSignedTransaction: (body: ChainMintErc721, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
        /**
         * Send BEP721 mint multiple provenance transaction to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @param provider url of the Server to connect to. If not set, default public server will be used.
         * @returns transaction id of the transaction in the blockchain
         */
        mintMultipleProvenanceSignedTransaction: (body: ChainMintMultipleNft & {
            fixedValues: string[][];
        }, provider?: string) => Promise<TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
    };
};
