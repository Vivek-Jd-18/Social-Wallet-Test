"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainToNativeCurrencyMapping = exports.CurrencyToBlockchainMapping = exports.BlockchainCurrencyMapping = void 0;
const api_client_1 = require("@tatumio/api-client");
exports.BlockchainCurrencyMapping = {
    BNB: api_client_1.Currency.BNB,
    BTC: api_client_1.Currency.BTC,
    LTC: api_client_1.Currency.LTC,
    KLAY: api_client_1.Currency.KLAY,
    DOGE: api_client_1.Currency.DOGE,
    BCH: api_client_1.Currency.BCH,
    SOL: api_client_1.Currency.SOL,
    TRON: {
        nativeCurrency: api_client_1.Currency.TRON,
        currencies: api_client_1.TRON_CURRENCIES,
    },
    FLOW: {
        nativeCurrency: api_client_1.Currency.FLOW,
        currencies: api_client_1.FLOW_CURRENCIES,
    },
    CELO: {
        nativeCurrency: api_client_1.Currency.CELO,
        currencies: api_client_1.CELO_CURRENCIES,
    },
    HARMONY: api_client_1.Currency.ONE,
    EGLD: api_client_1.Currency.EGLD,
    ETH: {
        nativeCurrency: api_client_1.Currency.ETH,
        currencies: api_client_1.ETH_BASED_CURRENCIES,
    },
    BSC: {
        nativeCurrency: api_client_1.Currency.BSC,
        currencies: api_client_1.BSC_BASED_CURRENCIES,
    },
    POLYGON: {
        nativeCurrency: api_client_1.Currency.MATIC,
        currencies: api_client_1.MATIC_BASED_CURRENCIES,
    },
    XDC: api_client_1.Currency.XDC,
    XRP: api_client_1.Currency.XRP,
    XLM: api_client_1.Currency.XLM,
    VET: api_client_1.Currency.VET,
    NEO: api_client_1.Currency.NEO,
    ADA: api_client_1.Currency.ADA,
    ALGO: api_client_1.Currency.ALGO,
    KCS: api_client_1.Currency.KCS,
    TEZOS: api_client_1.Currency.TEZOS,
    EON: api_client_1.Currency.ZEN,
};
exports.CurrencyToBlockchainMapping = buildCurrencyBlockchainMapping();
exports.BlockchainToNativeCurrencyMapping = buildBlockchainDefaultCurrencyMapping();
function buildBlockchainDefaultCurrencyMapping() {
    return Object.keys(exports.BlockchainCurrencyMapping)
        .map((blockchain) => {
        const value = exports.BlockchainCurrencyMapping[blockchain];
        if (typeof value === 'object')
            return { [blockchain]: value.nativeCurrency };
        return { [blockchain]: value };
    })
        .reduce((obj, item) => (Object.assign(Object.assign({}, obj), item)), {});
}
function buildCurrencyBlockchainMapping() {
    return Object.keys(exports.BlockchainCurrencyMapping)
        .map((blockchain) => {
        const value = exports.BlockchainCurrencyMapping[blockchain];
        if (typeof value === 'object') {
            return value.currencies.map((c) => ({
                [c]: blockchain,
            }));
        }
        return { [value]: blockchain };
    })
        .reduce((obj, item) => (Object.assign(Object.assign({}, obj), item)), {});
}
//# sourceMappingURL=BlockchainCurrencyMapping.js.map