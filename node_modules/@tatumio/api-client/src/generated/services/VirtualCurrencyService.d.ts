import type { Account } from '../models/Account';
import type { TransactionResult } from '../models/TransactionResult';
import type { VC } from '../models/VC';
import type { VirtualCurrency } from '../models/VirtualCurrency';
import type { VirtualCurrencyOperation } from '../models/VirtualCurrencyOperation';
import type { VirtualCurrencyUpdate } from '../models/VirtualCurrencyUpdate';
import type { CancelablePromise } from '../core/CancelablePromise';
export declare class VirtualCurrencyService {
    /**
     * Create new virtual currency
     * <p><b>2 credits per API call</b></p>
     * <p>Create new virtual currency with given supply stored in account. This will create Tatum internal virtual currency. Every virtual currency must be prefixed with <b>VC_</b>.</p>
     * <p>Every virtual currency must be pegged to existing FIAT or supported cryptocurrency. 1 unit of virtual currency has then the same amount as 1 unit of the base currency it is pegged to. It is possible to set a custom base rate for the virtual currency. (baseRate = 2 => 1 VC unit = 2 basePair units)</p>
     * <p>Tatum virtual currency acts as any other asset within Tatum. To create a fungible token, see the <a href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy" target="_blank">API for deploying a fungible token smart contract</a>.</p>
     * <p>This operation returns the newly created Tatum Ledger account with an initial balance set to the virtual currency's total supply. Total supply can be changed in the future.</p>
     *
     * @param requestBody
     * @returns Account OK
     * @throws ApiError
     */
    static createCurrency(requestBody: VirtualCurrency): CancelablePromise<Account>;
    /**
     * Update virtual currency
     * <h4>2 credits per API call.</h4><br/><p>Change base pair and/or base rate of existing virtual currency.</p>
     * @param requestBody
     * @returns void
     * @throws ApiError
     */
    static updateCurrency(requestBody: VirtualCurrencyUpdate): CancelablePromise<void>;
    /**
     * Get virtual currency
     * <p><b>1 credit per API call</b></p>
     * <p>Get detail of virtual currency.</p>
     *
     * @param name
     * @returns VC OK
     * @throws ApiError
     */
    static getCurrency(name: string): CancelablePromise<VC>;
    /**
     * Create new supply of virtual currency
     * <p><b>2 credits per API call</b></p>
     * <p>Create new supply of virtual currency linked on the given accountId. Method increases the total supply of the currency.</p>
     * <p>This method creates Ledger transaction with operationType MINT with undefined counterAccountId.</p>
     *
     * @param requestBody
     * @returns TransactionResult OK
     * @throws ApiError
     */
    static mintCurrency(requestBody: VirtualCurrencyOperation): CancelablePromise<TransactionResult>;
    /**
     * Destroy supply of virtual currency
     * <h4>2 credits per API call.</h4><br/>
     * <p>Destroy supply of virtual currency linked on the given accountId. Method decreases the total supply of the currency.<br/>
     * This method creates Ledger transaction with operationType REVOKE with undefined counterAccountId.</p>
     *
     * @param requestBody
     * @returns TransactionResult OK
     * @throws ApiError
     */
    static revokeCurrency(requestBody: VirtualCurrencyOperation): CancelablePromise<TransactionResult>;
}
