"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualCurrencyService = void 0;
const request_1 = require("../core/request");
class VirtualCurrencyService {
    /**
     * Create new virtual currency
     * <p><b>2 credits per API call</b></p>
     * <p>Create new virtual currency with given supply stored in account. This will create Tatum internal virtual currency. Every virtual currency must be prefixed with <b>VC_</b>.</p>
     * <p>Every virtual currency must be pegged to existing FIAT or supported cryptocurrency. 1 unit of virtual currency has then the same amount as 1 unit of the base currency it is pegged to. It is possible to set a custom base rate for the virtual currency. (baseRate = 2 => 1 VC unit = 2 basePair units)</p>
     * <p>Tatum virtual currency acts as any other asset within Tatum. To create a fungible token, see the <a href="https://apidoc.tatum.io/tag/Fungible-Tokens-(ERC-20-or-compatible)#operation/Erc20Deploy" target="_blank">API for deploying a fungible token smart contract</a>.</p>
     * <p>This operation returns the newly created Tatum Ledger account with an initial balance set to the virtual currency's total supply. Total supply can be changed in the future.</p>
     *
     * @param requestBody
     * @returns Account OK
     * @throws ApiError
     */
    static createCurrency(requestBody) {
        return (0, request_1.request)({
            method: 'POST',
            path: `/v3/ledger/virtualCurrency`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server while processing the request.`,
            },
        });
    }
    /**
     * Update virtual currency
     * <h4>2 credits per API call.</h4><br/><p>Change base pair and/or base rate of existing virtual currency.</p>
     * @param requestBody
     * @returns void
     * @throws ApiError
     */
    static updateCurrency(requestBody) {
        return (0, request_1.request)({
            method: 'PUT',
            path: `/v3/ledger/virtualCurrency`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server while processing the request.`,
            },
        });
    }
    /**
     * Get virtual currency
     * <p><b>1 credit per API call</b></p>
     * <p>Get detail of virtual currency.</p>
     *
     * @param name
     * @returns VC OK
     * @throws ApiError
     */
    static getCurrency(name) {
        return (0, request_1.request)({
            method: 'GET',
            path: `/v3/ledger/virtualCurrency/${name}`,
            errors: {
                400: `Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server while processing the request.`,
            },
        });
    }
    /**
     * Create new supply of virtual currency
     * <p><b>2 credits per API call</b></p>
     * <p>Create new supply of virtual currency linked on the given accountId. Method increases the total supply of the currency.</p>
     * <p>This method creates Ledger transaction with operationType MINT with undefined counterAccountId.</p>
     *
     * @param requestBody
     * @returns TransactionResult OK
     * @throws ApiError
     */
    static mintCurrency(requestBody) {
        return (0, request_1.request)({
            method: 'PUT',
            path: `/v3/ledger/virtualCurrency/mint`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server while processing the request.`,
            },
        });
    }
    /**
     * Destroy supply of virtual currency
     * <h4>2 credits per API call.</h4><br/>
     * <p>Destroy supply of virtual currency linked on the given accountId. Method decreases the total supply of the currency.<br/>
     * This method creates Ledger transaction with operationType REVOKE with undefined counterAccountId.</p>
     *
     * @param requestBody
     * @returns TransactionResult OK
     * @throws ApiError
     */
    static revokeCurrency(requestBody) {
        return (0, request_1.request)({
            method: 'PUT',
            path: `/v3/ledger/virtualCurrency/revoke`,
            body: requestBody,
            mediaType: 'application/json',
            errors: {
                400: `Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.`,
                401: `Unauthorized. Not valid or inactive subscription key present in the HTTP Header.`,
                403: `Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.`,
                500: `Internal server error. There was an error on the server while processing the request.`,
            },
        });
    }
}
exports.VirtualCurrencyService = VirtualCurrencyService;
//# sourceMappingURL=VirtualCurrencyService.js.map