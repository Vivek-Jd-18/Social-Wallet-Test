"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TatumKlaytnSDK = void 0;
const tslib_1 = require("tslib");
const shared_blockchain_evm_based_1 = require("@tatumio/shared-blockchain-evm-based");
const shared_core_1 = require("@tatumio/shared-core");
const api_client_1 = require("@tatumio/api-client");
const shared_abstract_sdk_1 = require("@tatumio/shared-abstract-sdk");
const klaytn_web3_1 = require("./services/klaytn.web3");
const klaytn_kms_1 = require("./services/klaytn.kms");
const klaytn_tx_1 = require("./services/klaytn.tx");
const klaytn_auction_1 = require("./services/klaytn.auction");
const klaytn_virtualAccount_1 = require("./services/klaytn.virtualAccount");
const blockchain = shared_core_1.Blockchain.KLAY;
const TatumKlaytnSDK = (args) => {
    const web3 = (0, klaytn_web3_1.klaytnWeb3)({ blockchain });
    const txService = (0, klaytn_tx_1.klaytnTxService)({ blockchain, web3 });
    const virtualAccount = (0, klaytn_virtualAccount_1.virtualAccountService)({ blockchain, web3 });
    const _a = (0, shared_blockchain_evm_based_1.evmBasedSdk)(Object.assign(Object.assign({}, args), { blockchain, web3 })), { custodialManagedWallet } = _a, evmSdk = tslib_1.__rest(_a, ["custodialManagedWallet"]);
    const { nft, storage } = (0, shared_abstract_sdk_1.abstractSdkNft)();
    return Object.assign(Object.assign({}, evmSdk), { kms: (0, klaytn_kms_1.klaytnKmsService)({ blockchain, web3 }), transaction: txService.native, erc20: Object.assign(Object.assign({}, txService.erc20), { getErc20TransactionByAddress: api_client_1.FungibleTokensErc20OrCompatibleService.erc20GetTransactionByAddress, getErc20AccountBalance: api_client_1.FungibleTokensErc20OrCompatibleService.erc20GetBalance }), nft: Object.assign(Object.assign({}, txService.erc721), nft), storage, multiToken: txService.multiToken, gasPump: txService.gasPump, marketplace: Object.assign(Object.assign({}, (0, shared_blockchain_evm_based_1.evmBasedMarketplace)({
            blockchain,
            web3,
            broadcastFunction: api_client_1.KlaytnService.klaytnBroadcast,
        })), { auction: (0, klaytn_auction_1.klaytnAuctionService)({ blockchain, web3 }) }), httpDriver: (request) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            return api_client_1.KlaytnService.klaytnWeb3Driver(args.apiKey, Object.assign(Object.assign({}, request), { jsonrpc: '2.0' }));
        }), blockchain: {
            broadcast: api_client_1.KlaytnService.klaytnBroadcast,
            getTransactionsCount: api_client_1.KlaytnService.klaytnGetTransactionCount,
            getCurrentBlock: api_client_1.KlaytnService.klaytnGetCurrentBlock,
            getBlock: api_client_1.KlaytnService.klaytnGetBlock,
            getBlockchainAccountBalance: api_client_1.KlaytnService.klaytnGetBalance,
            getTransaction: api_client_1.KlaytnService.klaytnGetTransaction,
            estimateGas: api_client_1.BlockchainFeesService.klaytnEstimateGas,
            smartContractGetAddress: api_client_1.BlockchainUtilsService.scGetContractAddress,
        }, smartContract: txService.smartContract, virtualAccount });
};
exports.TatumKlaytnSDK = TatumKlaytnSDK;
//# sourceMappingURL=sdk-klaytn.js.map