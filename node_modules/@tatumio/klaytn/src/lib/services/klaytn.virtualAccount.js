"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.virtualAccountService = void 0;
const tslib_1 = require("tslib");
const api_client_1 = require("@tatumio/api-client");
const shared_blockchain_abstract_1 = require("@tatumio/shared-blockchain-abstract");
const shared_blockchain_evm_based_1 = require("@tatumio/shared-blockchain-evm-based");
const shared_core_1 = require("@tatumio/shared-core");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const klaytn_tx_1 = require("./klaytn.tx");
const sendKlaytnVirtualAccountTransaction = (body, web3) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const txService = (0, klaytn_tx_1.klaytnTxService)({ blockchain: shared_core_1.Blockchain.KLAY, web3 });
    const { mnemonic, index, privateKey, gasLimit, gasPrice, nonce } = body, withdrawal = tslib_1.__rest(body, ["mnemonic", "index", "privateKey", "gasLimit", "gasPrice", "nonce"]);
    const { amount, address } = withdrawal;
    let fromPrivKey;
    let txData;
    if (mnemonic && index !== undefined) {
        fromPrivKey = (yield shared_blockchain_evm_based_1.evmBasedUtils.generatePrivateKeyFromMnemonic(shared_core_1.Blockchain.KLAY, mnemonic, index));
    }
    else {
        fromPrivKey = privateKey;
    }
    const account = yield api_client_1.AccountService.getAccountByAccountId(body.senderAccountId);
    const fee = {
        gasLimit: gasLimit || '21000',
        gasPrice: gasPrice || '25',
    };
    if (account.currency === api_client_1.Currency.KLAY) {
        txData = yield txService.native.prepare.transferSignedTransaction({
            amount,
            fromPrivateKey: fromPrivKey,
            fee,
            nonce: body.nonce,
            to: address,
        });
    }
    else {
        fee.gasLimit = '100000';
        const vc = yield api_client_1.VirtualCurrencyService.getCurrency(account.currency);
        txData = yield txService.erc20.prepare.transferSignedTransaction({
            amount,
            fee,
            fromPrivateKey: fromPrivKey,
            to: address,
            digits: vc.precision,
            nonce: body.nonce,
            contractAddress: vc.erc20Address,
        });
    }
    const withdrawalFee = web3
        .getClient()
        .utils.fromWei(new bignumber_js_1.default(fee.gasLimit).multipliedBy(shared_blockchain_evm_based_1.evmBasedUtils.transformToWei(fee.gasPrice, 'gwei')).toString(), 'ether');
    const withdrawalBody = Object.assign(Object.assign({}, withdrawal), { fee: withdrawalFee });
    const { id } = yield api_client_1.WithdrawalService.storeWithdrawal(withdrawalBody);
    try {
        return Object.assign(Object.assign({}, (yield api_client_1.WithdrawalService.broadcastBlockchainTransaction({
            txData,
            withdrawalId: id,
            currency: api_client_1.Currency.KLAY,
        }))), { id });
    }
    catch (e) {
        console.error(e);
        try {
            return yield api_client_1.WithdrawalService.cancelInProgressWithdrawal(id);
        }
        catch (e1) {
            return { id };
        }
    }
});
const virtualAccountService = (args) => {
    return Object.assign(Object.assign({}, (0, shared_blockchain_abstract_1.abstractBlockchainVirtualAccount)(args)), { 
        /**
         * Send Klaytn transaction from Tatum Ledger account to the blockchain. This method broadcasts signed transaction to the blockchain.
         * This operation is irreversible.
         * @param body content of the transaction to broadcast
         * @returns transaction id of the transaction in the blockchain or id of the withdrawal, if it was not cancelled automatically
         */
        send: (body) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            if (body.signatureId) {
                return api_client_1.ApiServices.virtualAccount.blockchain.klayTransfer(body);
            }
            else {
                return yield sendKlaytnVirtualAccountTransaction(body, args.web3);
            }
        }) });
};
exports.virtualAccountService = virtualAccountService;
//# sourceMappingURL=klaytn.virtualAccount.js.map