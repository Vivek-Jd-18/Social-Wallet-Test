import { EvmBasedWeb3 } from '@tatumio/shared-blockchain-evm-based';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const klaytnAuctionService: (args: {
    blockchain: EvmBasedBlockchain;
    web3: EvmBasedWeb3;
}) => {
    getAuction: (contractAddress: string, auctionId: string) => Promise<{
        amount?: string;
        bidder?: string;
        erc20Address?: string;
        isErc721?: boolean;
        startedAt?: string;
        endedAt?: string;
        nftAddress?: string;
        endingPrice?: string;
        seller?: string;
        highestBid?: string;
    }>;
    getAuctionFee: (contractAddress: string) => Promise<number>;
    getAuctionFeeRecipient: (contractAddress: string) => Promise<{
        address?: string;
    }>;
    prepare: {
        deployAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").DeployNftAuction, provider?: string) => Promise<string>;
        auctionUpdateFeeRecipientSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").UpdateAuctionFeeRecipient, provider?: string) => Promise<string>;
        createAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CreateAuctionEvm, provider?: string) => Promise<string>;
        auctionApproveNftTransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveNftTransfer, provider?: string) => Promise<string>;
        auctionApproveErc20TransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveErc20Spending, provider?: string) => Promise<string>;
        auctionBidSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").AuctionBid, provider?: string) => Promise<string>;
        auctionCancelSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<string>;
        auctionSettleSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<string>;
    };
    send: {
        deployAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").DeployNftAuction, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        auctionUpdateFeeRecipientSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").UpdateAuctionFeeRecipient, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        createAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CreateAuctionEvm, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        auctionApproveNftTransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveNftTransfer, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        auctionApproveErc20TransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveErc20Spending, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        auctionBidSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").AuctionBid, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        auctionCancelSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        auctionSettleSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
    };
};
