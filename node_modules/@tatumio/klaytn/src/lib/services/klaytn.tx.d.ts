import { EvmBasedWeb3 } from '@tatumio/shared-blockchain-evm-based';
import { EvmBasedBlockchain } from '@tatumio/shared-core';
export declare const klaytnTxService: (args: {
    blockchain: EvmBasedBlockchain;
    web3: EvmBasedWeb3;
}) => {
    native: {
        prepare: {
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferNative, provider?: string) => Promise<string>;
        };
        send: {
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferNative, provider?: string) => Promise<any>;
        };
    };
    erc20: {
        decimals: (contractAddress: string, provider?: string) => Promise<any>;
        prepare: {
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSdkDeployErc20, provider?: string) => Promise<string>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc20, provider?: string) => Promise<string>;
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc20, provider?: string) => Promise<string>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc20, provider?: string) => Promise<string>;
            approveSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainApproveErc20, provider?: string) => Promise<string>;
        };
        send: {
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSdkDeployErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            approveSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainApproveErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        };
    };
    erc721: {
        prepare: {
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<string>;
            mintCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<string>;
            mintMultipleCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<string>;
            mintMultipleSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<string>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc721, provider?: string) => Promise<string>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc721, provider?: string) => Promise<string>;
            updateCashbackForAuthorSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateCashbackErc721, provider?: string) => Promise<string>;
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployErc721, provider?: string) => Promise<string>;
            mintProvenanceSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<string>;
            mintMultipleProvenanceSignedTransaction: (body: Omit<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
            }> & Partial<Pick<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey">> & Partial<{
                mnemonic: string;
            }> & {
                fixedValues: string[][];
            }, provider?: string) => Promise<string>;
            addMinterSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainAddMinterErc721, provider: string) => Promise<string>;
        };
        send: {
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721 | import("@tatumio/api-client").MintNftMinter, provider?: string) => Promise<string | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            mintCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            mintMultipleCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
            mintMultipleSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            updateCashbackForAuthorSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateCashbackErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            mintProvenanceSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            mintMultipleProvenanceSignedTransaction: (body: Omit<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
            }> & Partial<Pick<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey">> & Partial<{
                mnemonic: string;
            }> & {
                fixedValues: string[][];
            }, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
        };
    };
    gasPump: {
        prepare: {
            gasPumpWalletBatch: (testnet: boolean, body: any, provider?: string) => Promise<any>;
        };
    };
    multiToken: {
        prepare: {
            mintMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiToken, provider?: string) => Promise<string>;
            mintMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiTokenBatch, provider?: string) => Promise<string>;
            transferMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiToken, provider?: string) => Promise<string>;
            transferMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiTokenBatch, provider?: string) => Promise<string>;
            deployMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployMultiToken, provider?: string) => Promise<string>;
            burnMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiToken, provider?: string) => Promise<string>;
            burnMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiTokenBatch, provider?: string) => Promise<string>;
        };
        send: {
            mintMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            mintMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            deployMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            burnMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            burnMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        };
        getTransactionByAddress: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetTransactionByAddress;
        getTransaction: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetTransaction;
        getAddressBalance: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetAddressBalance;
        getBalance: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetBalance;
        getBalanceBatch: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetBalanceBatch;
        getMetadata: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetMetadata;
    };
    custodial: {
        prepare: {
            transferFromCustodialWallet: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<any>;
            batchTransferFromCustodialWallet: (body: import("@tatumio/shared-blockchain-abstract").ChainBatchTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<any>;
            approveFromCustodialWallet: (body: import("@tatumio/shared-blockchain-abstract").ChainApproveCustodialTransfer, provider?: string) => Promise<any>;
            custodialWalletBatch: (body: import("@tatumio/shared-blockchain-abstract").ChainGenerateCustodialWalletBatch, provider?: string, testnet?: boolean) => Promise<any>;
        };
        send: {
            transferFromCustodialWallet: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            batchTransferFromCustodialWallet: (body: import("@tatumio/shared-blockchain-abstract").ChainBatchTransferCustodialWallet, provider?: string, testnet?: boolean) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            approveFromCustodialWallet: (body: import("@tatumio/shared-blockchain-abstract").ChainApproveCustodialTransfer, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            custodialWalletBatch: (body: import("@tatumio/shared-blockchain-abstract").ChainGenerateCustodialWalletBatch, provider?: string, testnet?: boolean) => Promise<string | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        };
    };
    smartContract: {
        prepare: {
            smartContractWriteMethodInvocationTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSmartContractMethodInvocation, provider?: string) => Promise<string>;
        };
        send: {
            smartContractReadMethodInvocationTransaction: (body: import("@tatumio/api-client").CallReadSmartContractMethod, provider?: string) => Promise<{
                data: any;
            }>;
            smartContractMethodInvocationTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSmartContractMethodInvocation, provider?: string) => Promise<any>;
        };
    };
};
