import { Web3Request, Web3Response } from '@tatumio/shared-core';
import { BlockchainFeesService, BlockchainUtilsService, FungibleTokensErc20OrCompatibleService, KlaytnService } from '@tatumio/api-client';
import { SDKArguments } from '@tatumio/shared-abstract-sdk';
export declare const TatumKlaytnSDK: (args: SDKArguments) => {
    kms: {
        sign(tx: import("@tatumio/api-client").PendingTransaction, fromPrivateKey: string, provider?: string): Promise<string>;
        getAllPending(signatures?: string): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").PendingTransaction[]>;
        get: typeof import("@tatumio/api-client").KeyManagementSystemService.getPendingTransactionToSign;
        complete: typeof import("@tatumio/api-client").KeyManagementSystemService.completePendingSignature;
        delete: typeof import("@tatumio/api-client").KeyManagementSystemService.deletePendingTransactionToSign;
    };
    transaction: {
        prepare: {
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferNative, provider?: string) => Promise<string>;
        };
        send: {
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferNative, provider?: string) => Promise<any>;
        };
    };
    erc20: {
        getErc20TransactionByAddress: typeof FungibleTokensErc20OrCompatibleService.erc20GetTransactionByAddress;
        getErc20AccountBalance: typeof FungibleTokensErc20OrCompatibleService.erc20GetBalance;
        decimals: (contractAddress: string, provider?: string) => Promise<any>;
        prepare: {
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSdkDeployErc20, provider?: string) => Promise<string>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc20, provider?: string) => Promise<string>;
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc20, provider?: string) => Promise<string>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc20, provider?: string) => Promise<string>;
            approveSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainApproveErc20, provider?: string) => Promise<string>;
        };
        send: {
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSdkDeployErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            approveSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainApproveErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        };
    };
    nft: {
        deployNFTSmartContract: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftDeployErc721;
        addNFTMinter: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftAddMinter;
        mintNFT: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftMintErc721;
        mintMultipleNFTs: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftMintMultipleErc721;
        burnNFT: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftBurnErc721;
        transferNFT: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftTransferErc721;
        updateNFTRoyalty: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftUpdateCashbackErc721;
        getNFTTransaction: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactErc721;
        getNFTTransactionsByToken: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactionByToken;
        getNFTTransactionsByAddress: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTransactionByAddress;
        getNFTsByAddress: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetTokensByAddressErc721;
        getNFTProvenanceData: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetProvenanceDataErc721;
        getNFTMetadataURI: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetMetadataErc721;
        getNFTRoyalty: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetRoyaltyErc721;
        getNFTAccountBalance: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetBalanceErc721;
        getNFTContractAddress: typeof import("@tatumio/api-client").NftErc721OrCompatibleService.nftGetContractAddress;
        getNFTImage: (chain: "ETH" | "BSC" | "MATIC" | "CELO" | "FLOW" | "TRON" | "ONE" | "KLAY" | "SOL" | "KCS", contractAddress: string, tokenId: string, account?: string) => Promise<{
            originalUrl: string;
            publicUrl: string;
        }>;
        prepareAddNftMinterAbstraction: (body: import("@tatumio/api-client").AddNftMinter | import("@tatumio/api-client").AddNftMinterKMS) => string[];
        prepare: {
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<string>;
            mintCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<string>;
            mintMultipleCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<string>;
            mintMultipleSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<string>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc721, provider?: string) => Promise<string>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc721, provider?: string) => Promise<string>;
            updateCashbackForAuthorSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateCashbackErc721, provider?: string) => Promise<string>;
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployErc721, provider?: string) => Promise<string>;
            mintProvenanceSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<string>;
            mintMultipleProvenanceSignedTransaction: (body: Omit<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
            }> & Partial<Pick<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey">> & Partial<{
                mnemonic: string;
            }> & {
                fixedValues: string[][];
            }, provider?: string) => Promise<string>;
            addMinterSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainAddMinterErc721, provider: string) => Promise<string>;
        };
        send: {
            mintSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721 | import("@tatumio/api-client").MintNftMinter, provider?: string) => Promise<string | import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            mintCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            mintMultipleCashbackSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
            mintMultipleSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultipleNft, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
            burnSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            updateCashbackForAuthorSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateCashbackErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            deploySignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            mintProvenanceSignedTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintErc721, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedResult | import("@tatumio/api-client").SolanaMintedResult | import("@tatumio/api-client").AlgorandMintedResult>;
            mintMultipleProvenanceSignedTransaction: (body: Omit<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
                index: number;
            }> & Partial<Pick<import("@tatumio/shared-abstract-sdk").WithoutChain<import("@tatumio/api-client").MintMultipleNft>, "fromPrivateKey">> & Partial<{
                mnemonic: string;
            }> & {
                fixedValues: string[][];
            }, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId | import("@tatumio/api-client").FlowMintedMultipleResult>;
        };
    };
    storage: {
        upload: typeof import("@tatumio/api-client").IpfsService.storeIpfs;
        get: typeof import("@tatumio/api-client").IpfsService.getIpfsData;
    };
    multiToken: {
        prepare: {
            mintMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiToken, provider?: string) => Promise<string>;
            mintMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiTokenBatch, provider?: string) => Promise<string>;
            transferMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiToken, provider?: string) => Promise<string>;
            transferMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiTokenBatch, provider?: string) => Promise<string>;
            deployMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployMultiToken, provider?: string) => Promise<string>;
            burnMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiToken, provider?: string) => Promise<string>;
            burnMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiTokenBatch, provider?: string) => Promise<string>;
        };
        send: {
            mintMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            mintMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainMintMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            transferMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainTransferMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            deployMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainDeployMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            burnMultiTokenTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiToken, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            burnMultiTokenBatchTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainBurnMultiTokenBatch, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        };
        getTransactionByAddress: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetTransactionByAddress;
        getTransaction: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetTransaction;
        getAddressBalance: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetAddressBalance;
        getBalance: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetBalance;
        getBalanceBatch: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetBalanceBatch;
        getMetadata: typeof import("@tatumio/api-client").MultiTokensErc1155OrCompatibleService.multiTokenGetMetadata;
    };
    gasPump: {
        prepare: {
            gasPumpWalletBatch: (testnet: boolean, body: any, provider?: string) => Promise<any>;
        };
    };
    marketplace: {
        auction: {
            getAuction: (contractAddress: string, auctionId: string) => Promise<{
                amount?: string;
                bidder?: string;
                erc20Address?: string;
                isErc721?: boolean;
                startedAt?: string;
                endedAt?: string;
                nftAddress?: string;
                endingPrice?: string;
                seller?: string;
                highestBid?: string;
            }>;
            getAuctionFee: (contractAddress: string) => Promise<number>;
            getAuctionFeeRecipient: (contractAddress: string) => Promise<{
                address?: string;
            }>;
            prepare: {
                deployAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").DeployNftAuction, provider?: string) => Promise<string>;
                auctionUpdateFeeRecipientSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").UpdateAuctionFeeRecipient, provider?: string) => Promise<string>;
                createAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CreateAuctionEvm, provider?: string) => Promise<string>;
                auctionApproveNftTransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveNftTransfer, provider?: string) => Promise<string>;
                auctionApproveErc20TransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveErc20Spending, provider?: string) => Promise<string>;
                auctionBidSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").AuctionBid, provider?: string) => Promise<string>;
                auctionCancelSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<string>;
                auctionSettleSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<string>;
            };
            send: {
                deployAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").DeployNftAuction, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                auctionUpdateFeeRecipientSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").UpdateAuctionFeeRecipient, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                createAuctionSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CreateAuctionEvm, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                auctionApproveNftTransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveNftTransfer, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                auctionApproveErc20TransferSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").ApproveErc20Spending, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                auctionBidSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").AuctionBid, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                auctionCancelSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
                auctionSettleSignedTransaction: (body: import("@tatumio/shared-blockchain-evm-based").CancelSettleAuction, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            };
        };
        prepare: {
            approveErc20Spending: (body: import("@tatumio/api-client").ApproveErc20, provider?: string) => Promise<string>;
            approveSpending: (body: import("@tatumio/shared-blockchain-evm-based").ApproveNftTransfer, provider?: string) => Promise<string>;
            generateMarketplace: (body: import("@tatumio/shared-blockchain-abstract").ChainGenerateMarketplace, provider?: string) => Promise<string>;
            updateFee: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateFee, provider?: string) => Promise<string>;
            updateFeeRecipient: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateFeeRecipient, provider?: string) => Promise<string>;
            sellMarketplaceListing: (body: import("@tatumio/shared-blockchain-abstract").ChainSellAssetOnMarketplace, provider?: string) => Promise<string>;
            cancelMarketplaceListing: (body: import("@tatumio/shared-blockchain-abstract").ChainCancelSellAssetOnMarketplace, provider?: string) => Promise<string>;
            buyMarketplaceListing: (body: import("@tatumio/shared-blockchain-abstract").ChainBuyAssetOnMarketplace, provider?: string) => Promise<string>;
        };
        send: {
            approveErc20Spending: (body: import("@tatumio/api-client").ApproveErc20, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            generateMarketplace: (body: import("@tatumio/shared-blockchain-abstract").ChainGenerateMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            updateFee: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateFee, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            updateFeeRecipient: (body: import("@tatumio/shared-blockchain-abstract").ChainUpdateFeeRecipient, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            sellMarketplaceListing: (body: import("@tatumio/shared-blockchain-abstract").ChainSellAssetOnMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            cancelMarketplaceListing: (body: import("@tatumio/shared-blockchain-abstract").ChainCancelSellAssetOnMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
            buyMarketplaceListing: (body: import("@tatumio/shared-blockchain-abstract").ChainBuyAssetOnMarketplace, provider?: string) => Promise<import("@tatumio/api-client").TransactionHash | import("@tatumio/api-client").SignatureId>;
        };
        getMarketplaceListing: typeof import("@tatumio/api-client").MarketplaceService.getMarketplaceListing;
        getMarketplaceListings: typeof import("@tatumio/api-client").MarketplaceService.getMarketplaceListings;
        getMarketplaceFee: typeof import("@tatumio/api-client").MarketplaceService.getMarketplaceFee;
        getMarketplaceFeeRecipient: typeof import("@tatumio/api-client").MarketplaceService.getMarketplaceFeeRecipient;
    };
    httpDriver: (request: Web3Request) => Promise<Web3Response>;
    blockchain: {
        broadcast: typeof KlaytnService.klaytnBroadcast;
        getTransactionsCount: typeof KlaytnService.klaytnGetTransactionCount;
        getCurrentBlock: typeof KlaytnService.klaytnGetCurrentBlock;
        getBlock: typeof KlaytnService.klaytnGetBlock;
        getBlockchainAccountBalance: typeof KlaytnService.klaytnGetBalance;
        getTransaction: typeof KlaytnService.klaytnGetTransaction;
        estimateGas: typeof BlockchainFeesService.klaytnEstimateGas;
        smartContractGetAddress: typeof BlockchainUtilsService.scGetContractAddress;
    };
    smartContract: {
        prepare: {
            smartContractWriteMethodInvocationTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSmartContractMethodInvocation, provider?: string) => Promise<string>;
        };
        send: {
            smartContractReadMethodInvocationTransaction: (body: import("@tatumio/api-client").CallReadSmartContractMethod, provider?: string) => Promise<{
                data: any;
            }>;
            smartContractMethodInvocationTransaction: (body: import("@tatumio/shared-blockchain-abstract").ChainSmartContractMethodInvocation, provider?: string) => Promise<any>;
        };
    };
    virtualAccount: {
        send: (body: Omit<import("@tatumio/api-client").TransferEth, "privateKey"> & Partial<import("@tatumio/api-client").SignatureId & {
            index: number;
        }> & Partial<Pick<import("@tatumio/api-client").TransferEth, "privateKey">> & Partial<{
            mnemonic: string;
        }>) => Promise<(void | {
            id?: string;
            txId?: string;
            completed?: boolean;
        }) | import("@tatumio/api-client").OffchainTransactionSignatureResult>;
        depositAddress: {
            checkExists: (address: string, index?: number) => Promise<any>;
            create: any;
            createMultiple: any;
            assign: any;
            remove: any;
            getByAccount: any;
        };
        withdrawal: {
            getAll: (status?: "InProgress" | "Done" | "Cancelled", pageSize?: number, offset?: number) => Promise<any[]>;
            broadcast: any;
            create: any;
            complete: any;
        };
        storeTokenAddress: any;
    };
    web3Client: (provider?: string, fromPrivateKey?: string) => import("web3").default;
    record: {
        getLog(id: string): import("@tatumio/api-client").CancelablePromise<{
            data: string;
        }>;
        storeLog(requestBody: import("@tatumio/shared-blockchain-evm-based").RequestBodyWithoutChain): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").TransactionHash>;
    };
    getGasPriceInWei: (provider?: string) => Promise<string>;
    wallet: {
        generateAddressFromXPub(xpub: string, i: number): string;
        generatePrivateKeyFromMnemonic(mnemonic: string, i: number, options?: {
            testnet: boolean;
        }): Promise<string>;
        generateAddressFromPrivateKey(privateKey: string): string;
        generateWallet(mnemonic?: string, options?: {
            testnet: boolean;
        }): Promise<Required<import("@tatumio/api-client").Wallet>>;
    };
    getExchangeRate(basePair?: import("@tatumio/api-client").Fiat): import("@tatumio/api-client").CancelablePromise<import("@tatumio/api-client").ExchangeRate>;
    subscriptions: typeof import("@tatumio/api-client").NotificationSubscriptionsService;
    security: {
        checkMaliciousAddress: typeof import("@tatumio/api-client").MaliciousAddressService.checkMalicousAddress;
    };
    tatum: {
        getCredits: typeof import("@tatumio/api-client").ServiceUtilsService.getCredits;
        getVersion: typeof import("@tatumio/api-client").ServiceUtilsService.getVersion;
        freezeApiKey: typeof import("@tatumio/api-client").ServiceUtilsService.freezeApiKey;
        unfreezeApiKey: typeof import("@tatumio/api-client").ServiceUtilsService.unfreezeApiKey;
    };
    ledger: {
        customer: {
            get: typeof import("@tatumio/api-client").CustomerService.getCustomerByExternalOrInternalId;
            getAll: typeof import("@tatumio/api-client").CustomerService.findAllCustomers;
            update: typeof import("@tatumio/api-client").CustomerService.updateCustomer;
            activate: typeof import("@tatumio/api-client").CustomerService.activateCustomer;
            deactivate: typeof import("@tatumio/api-client").CustomerService.deactivateCustomer;
            enable: typeof import("@tatumio/api-client").CustomerService.enableCustomer;
            disable: typeof import("@tatumio/api-client").CustomerService.disableCustomer;
        };
        orderBook: {
            getHistorical: typeof import("@tatumio/api-client").OrderBookService.getHistoricalTradesBody;
            getActiveBuyTrades: typeof import("@tatumio/api-client").OrderBookService.getBuyTradesBody;
            getActiveSellTrades: typeof import("@tatumio/api-client").OrderBookService.getSellTradesBody;
            newTrade: typeof import("@tatumio/api-client").OrderBookService.storeTrade;
            get: typeof import("@tatumio/api-client").OrderBookService.getTradeById;
            cancel: typeof import("@tatumio/api-client").OrderBookService.deleteTrade;
            cancelByAccount: typeof import("@tatumio/api-client").OrderBookService.deleteAccountTrades;
        };
        transaction: {
            send: typeof import("@tatumio/api-client").TransactionService.sendTransaction;
            sendMultiple: typeof import("@tatumio/api-client").TransactionService.sendTransactionBatch;
            getAll: typeof import("@tatumio/api-client").TransactionService.getTransactions;
            getAllByAccount: typeof import("@tatumio/api-client").TransactionService.getTransactionsByAccountId;
            getAllByCustomer: typeof import("@tatumio/api-client").TransactionService.getTransactionsByCustomerId;
            getAllByReference: typeof import("@tatumio/api-client").TransactionService.getTransactionsByReference;
            countByAccount: (filter: import("@tatumio/api-client").TransactionFilter) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
            countByCustomer: (filter: import("@tatumio/api-client").TransactionFilterCustomer) => import("@tatumio/api-client").CancelablePromise<number | import("@tatumio/api-client").Transaction[]>;
        };
        virtualCurrency: {
            create: typeof import("@tatumio/api-client").VirtualCurrencyService.createCurrency;
            mint: typeof import("@tatumio/api-client").VirtualCurrencyService.mintCurrency;
            revoke: typeof import("@tatumio/api-client").VirtualCurrencyService.revokeCurrency;
            getByName: typeof import("@tatumio/api-client").VirtualCurrencyService.getCurrency;
            update: typeof import("@tatumio/api-client").VirtualCurrencyService.updateCurrency;
        };
        blockAmount: {
            block: typeof import("@tatumio/api-client").AccountService.blockAmount;
            unblock: typeof import("@tatumio/api-client").AccountService.deleteBlockAmount;
            unblockWithTransaction: typeof import("@tatumio/api-client").AccountService.unblockAmountWithTransaction;
        };
        account: {
            get: typeof import("@tatumio/api-client").AccountService.getAccountByAccountId;
            getAll: typeof import("@tatumio/api-client").AccountService.getAccounts;
            getByCustomerId: typeof import("@tatumio/api-client").AccountService.getAccountsByCustomerId;
            getBalance: typeof import("@tatumio/api-client").AccountService.getAccountBalance;
            create: typeof import("@tatumio/api-client").AccountService.createAccount;
            createMultiple: typeof import("@tatumio/api-client").AccountService.createAccountBatch;
            update: typeof import("@tatumio/api-client").AccountService.updateAccountByAccountId;
            getBlockedAmountsByAccountId: typeof import("@tatumio/api-client").AccountService.getBlockAmountById;
            activate: typeof import("@tatumio/api-client").AccountService.activateAccount;
            deactivate: typeof import("@tatumio/api-client").AccountService.deactivateAccount;
            freeze: typeof import("@tatumio/api-client").AccountService.freezeAccount;
            unfreeze: typeof import("@tatumio/api-client").AccountService.unfreezeAccount;
            generate: (account: import("@tatumio/api-client").CreateAccount & {
                xpub?: string;
            }, generateNewWalletFn: any, generateNewWallet?: boolean, testnet?: boolean, webhookUrl?: string) => Promise<any>;
        };
    };
};
