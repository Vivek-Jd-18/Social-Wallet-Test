"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletProvider = void 0;
const tronwallet_abstract_adapter_1 = require("@tronweb3/tronwallet-abstract-adapter");
const tronwallet_adapter_tronlink_1 = require("@tronweb3/tronwallet-adapter-tronlink");
const react_1 = __importStar(require("react"));
const useWallet_js_1 = require("./useWallet.js");
const useLocalStorage_js_1 = require("./useLocalStorage.js");
const initialState = {
    wallet: null,
    address: null,
    connected: false,
    adapter: null,
};
const WalletProvider = function ({ children, adapters: adaptersPro = null, onError = (error) => console.error(error), onReadyStateChanged, onConnect, onDisconnect, onAccountsChanged, onChainChanged, onAdapterChanged, localStorageKey = 'tronAdapterName', autoConnect = true, disableAutoConnectOnLoad = false, }) {
    const [name, setName] = (0, useLocalStorage_js_1.useLocalStorage)(localStorageKey, null);
    const [{ wallet, connected, address, adapter }, setState] = (0, react_1.useState)(initialState);
    const [connecting, setConnecting] = (0, react_1.useState)(false);
    const [disconnecting, setDisconnecting] = (0, react_1.useState)(false);
    const isConnecting = (0, react_1.useRef)(false);
    const isDisconnecting = (0, react_1.useRef)(false);
    // set default supported adapters
    const adapters = (0, react_1.useMemo)(() => {
        if (adaptersPro === null) {
            return [new tronwallet_adapter_tronlink_1.TronLinkAdapter()];
        }
        return adaptersPro;
    }, [adaptersPro]);
    const [wallets, setWallets] = (0, react_1.useState)(() => adapters.map((adapter) => ({
        adapter,
        state: adapter.state,
    })));
    (0, react_1.useEffect)(function () {
        setWallets((prevWallets) => adapters.map((adapter, index) => {
            const wallet = prevWallets[index];
            if (wallet && wallet.adapter === adapter && wallet.state === adapter.state) {
                return wallet;
            }
            return {
                adapter,
                state: adapter.state,
            };
        }));
        function handleStateChange() {
            setWallets((prevWallets) => {
                const index = prevWallets.findIndex((wallet) => wallet.adapter === this);
                if (index === -1) {
                    return prevWallets;
                }
                return prevWallets.map((wallet, idx) => {
                    if (idx === index) {
                        return Object.assign(Object.assign({}, wallet), { state: wallet.adapter.state });
                    }
                    return wallet;
                });
            });
        }
        adapters.forEach((adapter) => adapter.on('stateChanged', handleStateChange, adapter));
        return () => adapters.forEach((adapter) => adapter.off('stateChanged', handleStateChange, adapter));
    }, [adapters]);
    // Set state when choosen wallet changes
    (0, react_1.useEffect)(function () {
        const wallet = name && wallets.find((item) => item.adapter.name === name);
        if (wallet) {
            setState({
                wallet,
                adapter: wallet.adapter,
                connected: wallet.adapter.connected,
                address: wallet.adapter.address,
            });
        }
        else {
            setState(initialState);
        }
    }, [name, wallets]);
    const preAdapter = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(function () {
        if (adapter !== preAdapter.current) {
            onAdapterChanged === null || onAdapterChanged === void 0 ? void 0 : onAdapterChanged(adapter);
            preAdapter.current = adapter;
        }
    }, [adapter, onAdapterChanged]);
    const handleConnect = (0, react_1.useCallback)(function (addr) {
        if (!adapter) {
            return setName(null);
        }
        setState((state) => (Object.assign(Object.assign({}, state), { connected: adapter.connected, address: adapter.address })));
        onConnect === null || onConnect === void 0 ? void 0 : onConnect(addr);
    }, [adapter, setName, onConnect]);
    const handleError = (0, react_1.useCallback)(function (error) {
        onError(error);
        return error;
    }, [onError]);
    const handleAccountChange = (0, react_1.useCallback)(function (address, preAddr) {
        setState((state) => (Object.assign(Object.assign({}, state), { address })));
        onAccountsChanged === null || onAccountsChanged === void 0 ? void 0 : onAccountsChanged(address, preAddr);
    }, [onAccountsChanged]);
    const handleDisconnect = (0, react_1.useCallback)(function () {
        onDisconnect === null || onDisconnect === void 0 ? void 0 : onDisconnect();
    }, [onDisconnect]);
    const handleReadyStateChanged = (0, react_1.useCallback)(function (readyState) {
        onReadyStateChanged === null || onReadyStateChanged === void 0 ? void 0 : onReadyStateChanged(readyState);
    }, [onReadyStateChanged]);
    const handleChainChanged = (0, react_1.useCallback)(function (chainData) {
        onChainChanged === null || onChainChanged === void 0 ? void 0 : onChainChanged(chainData);
    }, [onChainChanged]);
    (0, react_1.useEffect)(function () {
        if (adapter) {
            adapter.on('connect', handleConnect);
            adapter.on('error', handleError);
            adapter.on('accountsChanged', handleAccountChange);
            adapter.on('chainChanged', handleChainChanged);
            adapter.on('readyStateChanged', handleReadyStateChanged);
            adapter.on('disconnect', handleDisconnect);
            return () => {
                adapter.off('connect', handleConnect);
                adapter.off('error', handleError);
                adapter.off('accountsChanged', handleAccountChange);
                adapter.off('chainChanged', handleChainChanged);
                adapter.off('readyStateChanged', handleReadyStateChanged);
                adapter.off('disconnect', handleDisconnect);
            };
        }
    }, [
        adapter,
        handleConnect,
        handleError,
        handleAccountChange,
        handleChainChanged,
        handleReadyStateChanged,
        handleDisconnect,
    ]);
    // disconnect the previous when wallet changes
    (0, react_1.useEffect)(() => {
        return () => {
            adapter === null || adapter === void 0 ? void 0 : adapter.disconnect();
        };
    }, [adapter]);
    const hasManuallySetName = (0, react_1.useRef)(false);
    // auto connect
    (0, react_1.useEffect)(function () {
        const canAutoConnect = autoConnect && (!disableAutoConnectOnLoad || hasManuallySetName.current);
        if (isConnecting.current || !canAutoConnect || !adapter || adapter.state !== tronwallet_abstract_adapter_1.AdapterState.Disconnect) {
            return;
        }
        (function connect() {
            return __awaiter(this, void 0, void 0, function* () {
                isConnecting.current = true;
                setConnecting(true);
                try {
                    yield adapter.connect();
                }
                catch (error) {
                    // setName(null);
                }
                finally {
                    setConnecting(false);
                    isConnecting.current = false;
                }
            });
        })();
    }, [isConnecting, autoConnect, adapter, setName, disableAutoConnectOnLoad]);
    const select = (0, react_1.useCallback)((name) => {
        hasManuallySetName.current = true;
        setName(name);
    }, [setName]);
    const connect = (0, react_1.useCallback)(function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (isConnecting.current || isDisconnecting.current || connected) {
                return;
            }
            if (!adapter)
                throw handleError(new tronwallet_abstract_adapter_1.WalletNotSelectedError());
            isConnecting.current = true;
            setConnecting(true);
            try {
                yield adapter.connect();
            }
            catch (error) {
                setName(null);
                throw error;
            }
            finally {
                setConnecting(false);
                isConnecting.current = false;
            }
        });
    }, [isConnecting, isDisconnecting, adapter, connected, handleError, setName]);
    const disconnect = (0, react_1.useCallback)(function () {
        return __awaiter(this, void 0, void 0, function* () {
            if (isDisconnecting.current)
                return;
            if (!adapter)
                return setName(null);
            isDisconnecting.current = true;
            setDisconnecting(true);
            try {
                yield adapter.disconnect();
                setName(null);
            }
            catch (error) {
                setName(null);
                throw error;
            }
            finally {
                setDisconnecting(false);
                isDisconnecting.current = false;
            }
        });
    }, [adapter, isDisconnecting, setName]);
    const signTransaction = (0, react_1.useCallback)(function (transaction, privateKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!adapter)
                throw handleError(new tronwallet_abstract_adapter_1.WalletNotSelectedError());
            return yield adapter.signTransaction(transaction, privateKey);
        });
    }, [adapter, handleError]);
    const signMessage = (0, react_1.useCallback)(function (message, privateKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!adapter)
                throw handleError(new tronwallet_abstract_adapter_1.WalletNotSelectedError());
            return yield adapter.signMessage(message, privateKey);
        });
    }, [adapter, handleError]);
    return (react_1.default.createElement(useWallet_js_1.WalletContext.Provider, { value: {
            disableAutoConnectOnLoad,
            autoConnect,
            wallets,
            wallet,
            address,
            connecting,
            connected,
            disconnecting,
            select,
            connect,
            disconnect,
            signTransaction,
            signMessage,
        } }, children));
};
exports.WalletProvider = WalletProvider;
//# sourceMappingURL=WalletProvider.js.map